package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
)

func main() {
	//注册回调函数
	http.HandleFunc("/hello", hellhole)
	http.HandleFunc("/healthz", healthz)
	log.Println("start")
	//绑定tcp监听地址，并开始接受请求，然后调用服务端处理程序来处理传入的连接请求
	//参数1为addr即监听地址；参数2表示服务端处理程序，通常为nil
	//当参数2为nil时，服务端调用http.DefaultServeMux进行处理
	err := http.ListenAndServe(":8088", nil)
	if err != nil {
		log.Fatal("ListenAndServe: ", err)
	}
}

func hellhole(w http.ResponseWriter, r *http.Request) {
	//ParseForm解析URL中的查询字符串，并将解析结果更新到r.Form字段
	r.ParseForm()
	for key, value := range r.Header {
		fmt.Println(key, value)
		// 1.接收客户端 request，并将 request 中带的 header 写入 response header
		w.Header().Set(key, arrayToString(value))
	}

	// 2.读取当前系统的环境变量中的 VERSION 配置，并写入 response header
	envVersion := os.Getenv("VERSION")
	log.Println(envVersion)
	w.Header().Set("VERSOIN", envVersion)

	// 3.Server 端记录访问日志包括客户端 IP，HTTP 返回码，输出到 server 端的标准输出
	ipClient := r.RemoteAddr
	log.Println(ipClient)
}

func healthz(w http.ResponseWriter, r *http.Request) {
	// 4.当访问 localhost/healthz 时，应返回 200
	w.Write([]byte("200"))
}

func arrayToString(arr []string) string {
	var result string
	for _, i := range arr { //遍历数组中所有元素追加成string
		result += i
	}
	return result
}
